// tslint:disable
/**
 * argus
 * My blog
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    sortedId: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Article
     */
    categories: Category[];
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    createDate: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    updateDate: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    imageHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof Article
     */
    isPrivate: boolean;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    articleNum: number;
}
/**
 * 
 * @export
 * @interface Draft
 */
export interface Draft {
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Draft
     */
    sortedId: number;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    categories: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    updateDate: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    imageHash: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {RequestArticle}
     * @memberof InlineObject
     */
    article: RequestArticle;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {any}
     * @memberof InlineObject1
     */
    images?: any;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {RequestArticle}
     * @memberof InlineObject2
     */
    article: RequestArticle;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {RequestDraft}
     * @memberof InlineObject3
     */
    article: RequestDraft;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse200
     */
    articles: Article[];
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Article}
     * @memberof InlineResponse2001
     */
    article: Article;
    /**
     * 
     * @type {Article}
     * @memberof InlineResponse2001
     */
    next: Article;
    /**
     * 
     * @type {Article}
     * @memberof InlineResponse2001
     */
    prev: Article;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse2002
     */
    articles: Article[];
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    maxPage: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<Category>}
     * @memberof InlineResponse2003
     */
    categories: Category[];
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2004
     */
    verify?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Article}
     * @memberof InlineResponse2005
     */
    article: Article;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {Array<Draft>}
     * @memberof InlineResponse2006
     */
    drafts: Draft[];
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    maxPage: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {Draft}
     * @memberof InlineResponse2007
     */
    draft: Draft;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2008
     */
    images: string[];
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008
     */
    next: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2009
     */
    imageHash: string;
}
/**
 * 
 * @export
 * @interface RequestArticle
 */
export interface RequestArticle {
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    title: string;
    /**
     * 
     * @type {Array<RequestArticleCategories>}
     * @memberof RequestArticle
     */
    categories: RequestArticleCategories[];
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    imageHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestArticle
     */
    isPrivate: boolean;
}
/**
 * 
 * @export
 * @interface RequestArticleCategories
 */
export interface RequestArticleCategories {
    /**
     * 
     * @type {string}
     * @memberof RequestArticleCategories
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestArticleCategories
     */
    name: string;
}
/**
 * 
 * @export
 * @interface RequestDraft
 */
export interface RequestDraft {
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    categories: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    imageHash: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {Array<string>} category A category name which an articles has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCategoryGet(category: string[], options: any = {}): RequestArgs {
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError("category","Required parameter category was null or undefined when calling apiFindArticleListCategoryGet.");
      }
      const localVarPath = "/api/find/article/list/category";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (category) {
        localVarQueryParameter["category"] = category;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} createDate A created date of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCreateDateGet(createDate: string, p?: number, options: any = {}): RequestArgs {
      // verify required parameter 'createDate' is not null or undefined
      if (createDate === null || createDate === undefined) {
        throw new RequiredError("createDate","Required parameter createDate was null or undefined when calling apiFindArticleListCreateDateGet.");
      }
      const localVarPath = "/api/find/article/list/create-date";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (createDate !== undefined) {
        localVarQueryParameter["createDate"] = createDate;
      }

      if (p !== undefined) {
        localVarQueryParameter["p"] = p;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListGet(p?: number, options: any = {}): RequestArgs {
      const localVarPath = "/api/find/article/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (p !== undefined) {
        localVarQueryParameter["p"] = p;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} title A title of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListTitleGet(title: string, p?: number, options: any = {}): RequestArgs {
      // verify required parameter 'title' is not null or undefined
      if (title === null || title === undefined) {
        throw new RequiredError("title","Required parameter title was null or undefined when calling apiFindArticleListTitleGet.");
      }
      const localVarPath = "/api/find/article/list/title";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (title !== undefined) {
        localVarQueryParameter["title"] = title;
      }

      if (p !== undefined) {
        localVarQueryParameter["p"] = p;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return pick up articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticlePickupGet(options: any = {}): RequestArgs {
      const localVarPath = "/api/find/article/pickup";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return an aritlce by selected sortedId and next, previous article.
         * @param {number} sortedId Article sorted id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleSortedIdGet(sortedId: number, options: any = {}): RequestArgs {
      // verify required parameter 'sortedId' is not null or undefined
      if (sortedId === null || sortedId === undefined) {
        throw new RequiredError("sortedId","Required parameter sortedId was null or undefined when calling apiFindArticleSortedIdGet.");
      }
      const localVarPath = "/api/find/article/sortedId";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (sortedId !== undefined) {
        localVarQueryParameter["sortedId"] = sortedId;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindCategoryListGet(options: any = {}): RequestArgs {
      const localVarPath = "/api/find/category/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Delete draft.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDeleteDraftDelete(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id","Required parameter id was null or undefined when calling apiPrivateDeleteDraftDelete.");
      }
      const localVarPath = "/api/private/delete/draft";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Delete images.
         * @param {Array<string>} imageNames Image names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDeleteImageDelete(imageNames: string[], options: any = {}): RequestArgs {
      // verify required parameter 'imageNames' is not null or undefined
      if (imageNames === null || imageNames === undefined) {
        throw new RequiredError("imageNames","Required parameter imageNames was null or undefined when calling apiPrivateDeleteImageDelete.");
      }
      const localVarPath = "/api/private/delete/image";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }

      if (imageNames) {
        localVarQueryParameter["imageNames"] = imageNames;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Draft article.
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDraftArticlePost(inlineObject3?: InlineObject3, options: any = {}): RequestArgs {
      const localVarPath = "/api/private/draft/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return an aritlce by selected id.
         * @param {string} id Article id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindArticleIdGet(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id","Required parameter id was null or undefined when calling apiPrivateFindArticleIdGet.");
      }
      const localVarPath = "/api/private/find/article/id";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles (including private)
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindArticleListAllGet(p?: number, options: any = {}): RequestArgs {
      const localVarPath = "/api/private/find/article/list/all";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }

      if (p !== undefined) {
        localVarQueryParameter["p"] = p;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindDraftIdGet(id: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError("id","Required parameter id was null or undefined when calling apiPrivateFindDraftIdGet.");
      }
      const localVarPath = "/api/private/find/draft/id";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindDraftListGet(p?: number, options: any = {}): RequestArgs {
      const localVarPath = "/api/private/find/draft/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }

      if (p !== undefined) {
        localVarQueryParameter["p"] = p;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of image names.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindImageListGet(p?: number, options: any = {}): RequestArgs {
      const localVarPath = "/api/private/find/image/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }

      if (p !== undefined) {
        localVarQueryParameter["p"] = p;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateRegisterArticlePost(inlineObject: InlineObject, options: any = {}): RequestArgs {
      // verify required parameter 'inlineObject' is not null or undefined
      if (inlineObject === null || inlineObject === undefined) {
        throw new RequiredError("inlineObject","Required parameter inlineObject was null or undefined when calling apiPrivateRegisterArticlePost.");
      }
      const localVarPath = "/api/private/register/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Register new image.
         * @param {any} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateRegisterImagePost(images?: any, options: any = {}): RequestArgs {
      const localVarPath = "/api/private/register/image";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new FormData();

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }


      if (images !== undefined) { 
        localVarFormParams.append("images", images);
      }
    
    
      localVarHeaderParameter["Content-Type"] = "multipart/form-data";
    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Update article.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateUpdateArticlePut(inlineObject2: InlineObject2, options: any = {}): RequestArgs {
      // verify required parameter 'inlineObject2' is not null or undefined
      if (inlineObject2 === null || inlineObject2 === undefined) {
        throw new RequiredError("inlineObject2","Required parameter inlineObject2 was null or undefined when calling apiPrivateUpdateArticlePut.");
      }
      const localVarPath = "/api/private/update/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Verify token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiVerifyTokenPost(options: any = {}): RequestArgs {
      const localVarPath = "/api/verify/token";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === "function"
          ? configuration.accessToken()
          : configuration.accessToken;
        localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
      }


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {Array<string>} category A category name which an articles has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCategoryGet(category: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListCategoryGet(category, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} createDate A created date of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCreateDateGet(createDate: string, p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListCreateDateGet(createDate, p, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListGet(p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListGet(p, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} title A title of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListTitleGet(title: string, p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListTitleGet(title, p, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return pick up articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticlePickupGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticlePickupGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return an aritlce by selected sortedId and next, previous article.
         * @param {number} sortedId Article sorted id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleSortedIdGet(sortedId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleSortedIdGet(sortedId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindCategoryListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindCategoryListGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Delete draft.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDeleteDraftDelete(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateDeleteDraftDelete(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Delete images.
         * @param {Array<string>} imageNames Image names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDeleteImageDelete(imageNames: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateDeleteImageDelete(imageNames, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Draft article.
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDraftArticlePost(inlineObject3?: InlineObject3, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateDraftArticlePost(inlineObject3, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return an aritlce by selected id.
         * @param {string} id Article id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindArticleIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindArticleIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles (including private)
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindArticleListAllGet(p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindArticleListAllGet(p, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindDraftIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindDraftIdGet(id, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindDraftListGet(p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindDraftListGet(p, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of image names.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindImageListGet(p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindImageListGet(p, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateRegisterArticlePost(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateRegisterArticlePost(inlineObject, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Register new image.
         * @param {any} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateRegisterImagePost(images?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateRegisterImagePost(images, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Update article.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateUpdateArticlePut(inlineObject2: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateUpdateArticlePut(inlineObject2, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Verify token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiVerifyTokenPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiVerifyTokenPost(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {Array<string>} category A category name which an articles has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCategoryGet(category: string[], options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListCategoryGet(category, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} createDate A created date of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCreateDateGet(createDate: string, p?: number, options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListCreateDateGet(createDate, p, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListGet(p?: number, options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListGet(p, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} title A title of articles.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListTitleGet(title: string, p?: number, options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListTitleGet(title, p, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return pick up articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticlePickupGet(options?: any) {
      return DefaultApiFp(configuration).apiFindArticlePickupGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Return an aritlce by selected sortedId and next, previous article.
         * @param {number} sortedId Article sorted id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleSortedIdGet(sortedId: number, options?: any) {
      return DefaultApiFp(configuration).apiFindArticleSortedIdGet(sortedId, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindCategoryListGet(options?: any) {
      return DefaultApiFp(configuration).apiFindCategoryListGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Delete draft.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDeleteDraftDelete(id: string, options?: any) {
      return DefaultApiFp(configuration).apiPrivateDeleteDraftDelete(id, options)(axios, basePath);
    },
    /**
         * 
         * @summary Delete images.
         * @param {Array<string>} imageNames Image names.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDeleteImageDelete(imageNames: string[], options?: any) {
      return DefaultApiFp(configuration).apiPrivateDeleteImageDelete(imageNames, options)(axios, basePath);
    },
    /**
         * 
         * @summary Draft article.
         * @param {InlineObject3} [inlineObject3] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateDraftArticlePost(inlineObject3?: InlineObject3, options?: any) {
      return DefaultApiFp(configuration).apiPrivateDraftArticlePost(inlineObject3, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return an aritlce by selected id.
         * @param {string} id Article id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindArticleIdGet(id: string, options?: any) {
      return DefaultApiFp(configuration).apiPrivateFindArticleIdGet(id, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles (including private)
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindArticleListAllGet(p?: number, options?: any) {
      return DefaultApiFp(configuration).apiPrivateFindArticleListAllGet(p, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindDraftIdGet(id: string, options?: any) {
      return DefaultApiFp(configuration).apiPrivateFindDraftIdGet(id, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindDraftListGet(p?: number, options?: any) {
      return DefaultApiFp(configuration).apiPrivateFindDraftListGet(p, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of image names.
         * @param {number} [p] Page of view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateFindImageListGet(p?: number, options?: any) {
      return DefaultApiFp(configuration).apiPrivateFindImageListGet(p, options)(axios, basePath);
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateRegisterArticlePost(inlineObject: InlineObject, options?: any) {
      return DefaultApiFp(configuration).apiPrivateRegisterArticlePost(inlineObject, options)(axios, basePath);
    },
    /**
         * 
         * @summary Register new image.
         * @param {any} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateRegisterImagePost(images?: any, options?: any) {
      return DefaultApiFp(configuration).apiPrivateRegisterImagePost(images, options)(axios, basePath);
    },
    /**
         * 
         * @summary Update article.
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiPrivateUpdateArticlePut(inlineObject2: InlineObject2, options?: any) {
      return DefaultApiFp(configuration).apiPrivateUpdateArticlePut(inlineObject2, options)(axios, basePath);
    },
    /**
         * 
         * @summary Verify token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiVerifyTokenPost(options?: any) {
      return DefaultApiFp(configuration).apiVerifyTokenPost(options)(axios, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
     * 
     * @summary Return a list of articles by title.
     * @param {Array<string>} category A category name which an articles has.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListCategoryGet(category: string[], options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListCategoryGet(category, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles by title.
     * @param {string} createDate A created date of articles.
     * @param {number} [p] Page of view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListCreateDateGet(createDate: string, p?: number, options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListCreateDateGet(createDate, p, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles.
     * @param {number} [p] Page of view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListGet(p?: number, options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListGet(p, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles by title.
     * @param {string} title A title of articles.
     * @param {number} [p] Page of view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListTitleGet(title: string, p?: number, options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListTitleGet(title, p, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return pick up articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticlePickupGet(options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticlePickupGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return an aritlce by selected sortedId and next, previous article.
     * @param {number} sortedId Article sorted id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleSortedIdGet(sortedId: number, options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleSortedIdGet(sortedId, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindCategoryListGet(options?: any) {
    return DefaultApiFp(this.configuration).apiFindCategoryListGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Delete draft.
     * @param {string} id Draft id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateDeleteDraftDelete(id: string, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateDeleteDraftDelete(id, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Delete images.
     * @param {Array<string>} imageNames Image names.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateDeleteImageDelete(imageNames: string[], options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateDeleteImageDelete(imageNames, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Draft article.
     * @param {InlineObject3} [inlineObject3] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateDraftArticlePost(inlineObject3?: InlineObject3, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateDraftArticlePost(inlineObject3, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return an aritlce by selected id.
     * @param {string} id Article id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateFindArticleIdGet(id: string, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateFindArticleIdGet(id, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles (including private)
     * @param {number} [p] Page of view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateFindArticleListAllGet(p?: number, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateFindArticleListAllGet(p, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of drafts.
     * @param {string} id Draft id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateFindDraftIdGet(id: string, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateFindDraftIdGet(id, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of drafts.
     * @param {number} [p] Page of view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateFindDraftListGet(p?: number, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateFindDraftListGet(p, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of image names.
     * @param {number} [p] Page of view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateFindImageListGet(p?: number, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateFindImageListGet(p, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Register new article.
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateRegisterArticlePost(inlineObject: InlineObject, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateRegisterArticlePost(inlineObject, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Register new image.
     * @param {any} [images] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateRegisterImagePost(images?: any, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateRegisterImagePost(images, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Update article.
     * @param {InlineObject2} inlineObject2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiPrivateUpdateArticlePut(inlineObject2: InlineObject2, options?: any) {
    return DefaultApiFp(this.configuration).apiPrivateUpdateArticlePut(inlineObject2, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Verify token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiVerifyTokenPost(options?: any) {
    return DefaultApiFp(this.configuration).apiVerifyTokenPost(options)(this.axios, this.basePath);
  }

}


