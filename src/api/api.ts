// tslint:disable
/**
 * argus
 * My blog
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    sortedId: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Article
     */
    categories: Array<Category>;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    createDate: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    updateDate: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    imageHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof Article
     */
    isPrivate: boolean;
}
/**
 * 
 * @export
 * @interface ArticleReq
 */
export interface ArticleReq {
    /**
     * 
     * @type {string}
     * @memberof ArticleReq
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleReq
     */
    title: string;
    /**
     * 
     * @type {Array<ArticleReqCategories>}
     * @memberof ArticleReq
     */
    categories: Array<ArticleReqCategories>;
    /**
     * 
     * @type {string}
     * @memberof ArticleReq
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleReq
     */
    imageHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof ArticleReq
     */
    isPrivate: boolean;
}
/**
 * 
 * @export
 * @interface ArticleReqCategories
 */
export interface ArticleReqCategories {
    /**
     * 
     * @type {string}
     * @memberof ArticleReqCategories
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ArticleReqCategories
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    articleNum: number;
}
/**
 * 
 * @export
 * @interface Draft
 */
export interface Draft {
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Draft
     */
    sortedId: number;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    categories: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    updateDate: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    imageHash: string;
}
/**
 * 
 * @export
 * @interface DraftReq
 */
export interface DraftReq {
    /**
     * 
     * @type {string}
     * @memberof DraftReq
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof DraftReq
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof DraftReq
     */
    categories: string;
    /**
     * 
     * @type {string}
     * @memberof DraftReq
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof DraftReq
     */
    imageHash: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {ArticleReq}
     * @memberof InlineObject
     */
    article: ArticleReq;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {DraftReq}
     * @memberof InlineObject1
     */
    article: DraftReq;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {any}
     * @memberof InlineObject2
     */
    images?: any;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {ArticleReq}
     * @memberof InlineObject3
     */
    article: ArticleReq;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {DraftReq}
     * @memberof InlineObject4
     */
    draft: DraftReq;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineObject6
     */
    imageNames?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse200
     */
    articles: Array<Article>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    count: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Article}
     * @memberof InlineResponse2001
     */
    article: Article;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    nextTitle: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    prevTitle: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Category>}
     * @memberof InlineResponse2002
     */
    categories: Array<Category>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Article}
     * @memberof InlineResponse2003
     */
    article: Article;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Draft}
     * @memberof InlineResponse2004
     */
    draft: Draft;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<Draft>}
     * @memberof InlineResponse2005
     */
    drafts: Array<Draft>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005
     */
    count: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2006
     */
    images: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    next: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2007
     */
    imageHash: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return articles list by category.
         * @param {Array<string>} category Category name.
         * @param {number} p Page number.
         * @param {number} num number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListCategoryGet(category: Array<string>, p: number, num: number, options: any = {}): RequestArgs {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling apiFindArticleListCategoryGet.');
            }
            // verify required parameter 'p' is not null or undefined
            if (p === null || p === undefined) {
                throw new RequiredError('p','Required parameter p was null or undefined when calling apiFindArticleListCategoryGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiFindArticleListCategoryGet.');
            }
            const localVarPath = `/api/find/article/list/category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category) {
                localVarQueryParameter['category'] = category;
            }

            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return articles list.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListGet(p: number, num: number, options: any = {}): RequestArgs {
            // verify required parameter 'p' is not null or undefined
            if (p === null || p === undefined) {
                throw new RequiredError('p','Required parameter p was null or undefined when calling apiFindArticleListGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiFindArticleListGet.');
            }
            const localVarPath = `/api/find/article/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return articles list by title.
         * @param {string} title Article title.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListTitleGet(title: string, p: number, num: number, options: any = {}): RequestArgs {
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title','Required parameter title was null or undefined when calling apiFindArticleListTitleGet.');
            }
            // verify required parameter 'p' is not null or undefined
            if (p === null || p === undefined) {
                throw new RequiredError('p','Required parameter p was null or undefined when calling apiFindArticleListTitleGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiFindArticleListTitleGet.');
            }
            const localVarPath = `/api/find/article/list/title`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return an article whose sortedId is selected.
         * @param {number} sortedID Article sorted id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleSortedIdGet(sortedID: number, options: any = {}): RequestArgs {
            // verify required parameter 'sortedID' is not null or undefined
            if (sortedID === null || sortedID === undefined) {
                throw new RequiredError('sortedID','Required parameter sortedID was null or undefined when calling apiFindArticleSortedIdGet.');
            }
            const localVarPath = `/api/find/article/sortedId`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortedID !== undefined) {
                localVarQueryParameter['sortedID'] = sortedID;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return categories list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindCategoryListGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/find/category/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete draft.
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateDeleteDraftDelete(inlineObject5?: InlineObject5, options: any = {}): RequestArgs {
            const localVarPath = `/api/private/delete/draft`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject5 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {}) : (inlineObject5 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete images.
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateDeleteImageDelete(inlineObject6?: InlineObject6, options: any = {}): RequestArgs {
            const localVarPath = `/api/private/delete/image`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject6 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {}) : (inlineObject6 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return an article whose id is selected
         * @param {string} id Article id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindArticleIdGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrivateFindArticleIdGet.');
            }
            const localVarPath = `/api/private/find/article/id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return all articles list.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindArticleListGet(p: number, num: number, options: any = {}): RequestArgs {
            // verify required parameter 'p' is not null or undefined
            if (p === null || p === undefined) {
                throw new RequiredError('p','Required parameter p was null or undefined when calling apiPrivateFindArticleListGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiPrivateFindArticleListGet.');
            }
            const localVarPath = `/api/private/find/article/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return a draft whose id is selected.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindDraftIdGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiPrivateFindDraftIdGet.');
            }
            const localVarPath = `/api/private/find/draft/id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return all drafts list.
         * @param {number} p Page number.
         * @param {number} num Number of drafts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindDraftListGet(p: number, num: number, options: any = {}): RequestArgs {
            // verify required parameter 'p' is not null or undefined
            if (p === null || p === undefined) {
                throw new RequiredError('p','Required parameter p was null or undefined when calling apiPrivateFindDraftListGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiPrivateFindDraftListGet.');
            }
            const localVarPath = `/api/private/find/draft/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return images list.
         * @param {number} p Page number.
         * @param {number} num Number of images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindImageListGet(p: number, num: number, options: any = {}): RequestArgs {
            // verify required parameter 'p' is not null or undefined
            if (p === null || p === undefined) {
                throw new RequiredError('p','Required parameter p was null or undefined when calling apiPrivateFindImageListGet.');
            }
            // verify required parameter 'num' is not null or undefined
            if (num === null || num === undefined) {
                throw new RequiredError('num','Required parameter num was null or undefined when calling apiPrivateFindImageListGet.');
            }
            const localVarPath = `/api/private/find/image/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }

            if (num !== undefined) {
                localVarQueryParameter['num'] = num;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterArticlePost(inlineObject: InlineObject, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject' is not null or undefined
            if (inlineObject === null || inlineObject === undefined) {
                throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling apiPrivateRegisterArticlePost.');
            }
            const localVarPath = `/api/private/register/article`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new draft.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterDraftPost(inlineObject1?: InlineObject1, options: any = {}): RequestArgs {
            const localVarPath = `/api/private/register/draft`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new image.
         * @param {any} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterImagePost(images?: any, options: any = {}): RequestArgs {
            const localVarPath = `/api/private/register/image`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            if (images !== undefined) { 
                localVarFormParams.append('images', images as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update article.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateUpdateArticlePut(inlineObject3: InlineObject3, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject3' is not null or undefined
            if (inlineObject3 === null || inlineObject3 === undefined) {
                throw new RequiredError('inlineObject3','Required parameter inlineObject3 was null or undefined when calling apiPrivateUpdateArticlePut.');
            }
            const localVarPath = `/api/private/update/article`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject3 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {}) : (inlineObject3 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update draft.
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateUpdateDraftPut(inlineObject4?: InlineObject4, options: any = {}): RequestArgs {
            const localVarPath = `/api/private/update/draft`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject4 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {}) : (inlineObject4 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVerifyTokenPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/verify/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return articles list by category.
         * @param {Array<string>} category Category name.
         * @param {number} p Page number.
         * @param {number} num number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListCategoryGet(category: Array<string>, p: number, num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListCategoryGet(category, p, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return articles list.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListGet(p: number, num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListGet(p, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return articles list by title.
         * @param {string} title Article title.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListTitleGet(title: string, p: number, num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListTitleGet(title, p, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return an article whose sortedId is selected.
         * @param {number} sortedID Article sorted id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleSortedIdGet(sortedID: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleSortedIdGet(sortedID, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return categories list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindCategoryListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindCategoryListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete draft.
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateDeleteDraftDelete(inlineObject5?: InlineObject5, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateDeleteDraftDelete(inlineObject5, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete images.
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateDeleteImageDelete(inlineObject6?: InlineObject6, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateDeleteImageDelete(inlineObject6, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return an article whose id is selected
         * @param {string} id Article id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindArticleIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindArticleIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return all articles list.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindArticleListGet(p: number, num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindArticleListGet(p, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return a draft whose id is selected.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindDraftIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindDraftIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return all drafts list.
         * @param {number} p Page number.
         * @param {number} num Number of drafts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindDraftListGet(p: number, num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindDraftListGet(p, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return images list.
         * @param {number} p Page number.
         * @param {number} num Number of images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindImageListGet(p: number, num: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateFindImageListGet(p, num, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterArticlePost(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateRegisterArticlePost(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register new draft.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterDraftPost(inlineObject1?: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateRegisterDraftPost(inlineObject1, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register new image.
         * @param {any} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterImagePost(images?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateRegisterImagePost(images, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update article.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateUpdateArticlePut(inlineObject3: InlineObject3, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateUpdateArticlePut(inlineObject3, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update draft.
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateUpdateDraftPut(inlineObject4?: InlineObject4, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPrivateUpdateDraftPut(inlineObject4, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Verify token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVerifyTokenPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiVerifyTokenPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Return articles list by category.
         * @param {Array<string>} category Category name.
         * @param {number} p Page number.
         * @param {number} num number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListCategoryGet(category: Array<string>, p: number, num: number, options?: any) {
            return DefaultApiFp(configuration).apiFindArticleListCategoryGet(category, p, num, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return articles list.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListGet(p: number, num: number, options?: any) {
            return DefaultApiFp(configuration).apiFindArticleListGet(p, num, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return articles list by title.
         * @param {string} title Article title.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleListTitleGet(title: string, p: number, num: number, options?: any) {
            return DefaultApiFp(configuration).apiFindArticleListTitleGet(title, p, num, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return an article whose sortedId is selected.
         * @param {number} sortedID Article sorted id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindArticleSortedIdGet(sortedID: number, options?: any) {
            return DefaultApiFp(configuration).apiFindArticleSortedIdGet(sortedID, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return categories list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFindCategoryListGet(options?: any) {
            return DefaultApiFp(configuration).apiFindCategoryListGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete draft.
         * @param {InlineObject5} [inlineObject5] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateDeleteDraftDelete(inlineObject5?: InlineObject5, options?: any) {
            return DefaultApiFp(configuration).apiPrivateDeleteDraftDelete(inlineObject5, options)(axios, basePath);
        },
        /**
         * 
         * @summary Delete images.
         * @param {InlineObject6} [inlineObject6] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateDeleteImageDelete(inlineObject6?: InlineObject6, options?: any) {
            return DefaultApiFp(configuration).apiPrivateDeleteImageDelete(inlineObject6, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return an article whose id is selected
         * @param {string} id Article id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindArticleIdGet(id: string, options?: any) {
            return DefaultApiFp(configuration).apiPrivateFindArticleIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return all articles list.
         * @param {number} p Page number.
         * @param {number} num Number of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindArticleListGet(p: number, num: number, options?: any) {
            return DefaultApiFp(configuration).apiPrivateFindArticleListGet(p, num, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return a draft whose id is selected.
         * @param {string} id Draft id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindDraftIdGet(id: string, options?: any) {
            return DefaultApiFp(configuration).apiPrivateFindDraftIdGet(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return all drafts list.
         * @param {number} p Page number.
         * @param {number} num Number of drafts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindDraftListGet(p: number, num: number, options?: any) {
            return DefaultApiFp(configuration).apiPrivateFindDraftListGet(p, num, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return images list.
         * @param {number} p Page number.
         * @param {number} num Number of images.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateFindImageListGet(p: number, num: number, options?: any) {
            return DefaultApiFp(configuration).apiPrivateFindImageListGet(p, num, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterArticlePost(inlineObject: InlineObject, options?: any) {
            return DefaultApiFp(configuration).apiPrivateRegisterArticlePost(inlineObject, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register new draft.
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterDraftPost(inlineObject1?: InlineObject1, options?: any) {
            return DefaultApiFp(configuration).apiPrivateRegisterDraftPost(inlineObject1, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register new image.
         * @param {any} [images] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateRegisterImagePost(images?: any, options?: any) {
            return DefaultApiFp(configuration).apiPrivateRegisterImagePost(images, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update article.
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateUpdateArticlePut(inlineObject3: InlineObject3, options?: any) {
            return DefaultApiFp(configuration).apiPrivateUpdateArticlePut(inlineObject3, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update draft.
         * @param {InlineObject4} [inlineObject4] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPrivateUpdateDraftPut(inlineObject4?: InlineObject4, options?: any) {
            return DefaultApiFp(configuration).apiPrivateUpdateDraftPut(inlineObject4, options)(axios, basePath);
        },
        /**
         * 
         * @summary Verify token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVerifyTokenPost(options?: any) {
            return DefaultApiFp(configuration).apiVerifyTokenPost(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Return articles list by category.
     * @param {Array<string>} category Category name.
     * @param {number} p Page number.
     * @param {number} num number of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFindArticleListCategoryGet(category: Array<string>, p: number, num: number, options?: any) {
        return DefaultApiFp(this.configuration).apiFindArticleListCategoryGet(category, p, num, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return articles list.
     * @param {number} p Page number.
     * @param {number} num Number of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFindArticleListGet(p: number, num: number, options?: any) {
        return DefaultApiFp(this.configuration).apiFindArticleListGet(p, num, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return articles list by title.
     * @param {string} title Article title.
     * @param {number} p Page number.
     * @param {number} num Number of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFindArticleListTitleGet(title: string, p: number, num: number, options?: any) {
        return DefaultApiFp(this.configuration).apiFindArticleListTitleGet(title, p, num, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return an article whose sortedId is selected.
     * @param {number} sortedID Article sorted id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFindArticleSortedIdGet(sortedID: number, options?: any) {
        return DefaultApiFp(this.configuration).apiFindArticleSortedIdGet(sortedID, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return categories list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiFindCategoryListGet(options?: any) {
        return DefaultApiFp(this.configuration).apiFindCategoryListGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete draft.
     * @param {InlineObject5} [inlineObject5] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateDeleteDraftDelete(inlineObject5?: InlineObject5, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateDeleteDraftDelete(inlineObject5, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Delete images.
     * @param {InlineObject6} [inlineObject6] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateDeleteImageDelete(inlineObject6?: InlineObject6, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateDeleteImageDelete(inlineObject6, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return an article whose id is selected
     * @param {string} id Article id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateFindArticleIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateFindArticleIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return all articles list.
     * @param {number} p Page number.
     * @param {number} num Number of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateFindArticleListGet(p: number, num: number, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateFindArticleListGet(p, num, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return a draft whose id is selected.
     * @param {string} id Draft id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateFindDraftIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateFindDraftIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return all drafts list.
     * @param {number} p Page number.
     * @param {number} num Number of drafts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateFindDraftListGet(p: number, num: number, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateFindDraftListGet(p, num, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return images list.
     * @param {number} p Page number.
     * @param {number} num Number of images.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateFindImageListGet(p: number, num: number, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateFindImageListGet(p, num, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register new article.
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateRegisterArticlePost(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateRegisterArticlePost(inlineObject, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register new draft.
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateRegisterDraftPost(inlineObject1?: InlineObject1, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateRegisterDraftPost(inlineObject1, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register new image.
     * @param {any} [images] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateRegisterImagePost(images?: any, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateRegisterImagePost(images, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update article.
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateUpdateArticlePut(inlineObject3: InlineObject3, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateUpdateArticlePut(inlineObject3, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update draft.
     * @param {InlineObject4} [inlineObject4] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPrivateUpdateDraftPut(inlineObject4?: InlineObject4, options?: any) {
        return DefaultApiFp(this.configuration).apiPrivateUpdateDraftPut(inlineObject4, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Verify token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiVerifyTokenPost(options?: any) {
        return DefaultApiFp(this.configuration).apiVerifyTokenPost(options)(this.axios, this.basePath);
    }

}


