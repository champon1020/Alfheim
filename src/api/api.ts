// tslint:disable
/**
 * argus
 * My blog
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Article
     */
    categories: Category[];
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    createDate: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    updateDate: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    contentHash: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    imageHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof Article
     */
    _private: boolean;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    articleNum: number;
}
/**
 * 
 * @export
 * @interface Draft
 */
export interface Draft {
    /**
     * 
     * @type {number}
     * @memberof Draft
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    categories: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    updateDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    contentHash: string;
    /**
     * 
     * @type {string}
     * @memberof Draft
     */
    imageHash: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {RequestArticle}
     * @memberof InlineObject
     */
    article: RequestArticle;
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    contents: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {RequestArticle}
     * @memberof InlineObject1
     */
    article: RequestArticle;
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    contents: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {RequestDraft}
     * @memberof InlineObject2
     */
    article: RequestDraft;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    contents: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse200
     */
    articles: Article[];
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse2001
     */
    articles?: Article[];
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Category>}
     * @memberof InlineResponse2002
     */
    categories?: Category[];
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<Draft>}
     * @memberof InlineResponse2003
     */
    drafts: Draft[];
}
/**
 * 
 * @export
 * @interface RequestArticle
 */
export interface RequestArticle {
    /**
     * 
     * @type {number}
     * @memberof RequestArticle
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    title: string;
    /**
     * 
     * @type {Array<RequestArticleCategories>}
     * @memberof RequestArticle
     */
    categories: RequestArticleCategories[];
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    contentHash: string;
    /**
     * 
     * @type {string}
     * @memberof RequestArticle
     */
    imageHash: string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestArticle
     */
    _private: boolean;
}
/**
 * 
 * @export
 * @interface RequestArticleCategories
 */
export interface RequestArticleCategories {
    /**
     * 
     * @type {number}
     * @memberof RequestArticleCategories
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RequestArticleCategories
     */
    name: string;
}
/**
 * 
 * @export
 * @interface RequestDraft
 */
export interface RequestDraft {
    /**
     * 
     * @type {number}
     * @memberof RequestDraft
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    categories: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    contentHash: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDraft
     */
    imageHash: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         * 
         * @summary Draft article.
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiDraftArticlePost(inlineObject2?: InlineObject2, options: any = {}): RequestArgs {
      const localVarPath = "/api/draft/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject2 !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {}) : (inlineObject2 || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {Array<string>} category A category name which an articles has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCategoryGet(category: string[], options: any = {}): RequestArgs {
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError("category","Required parameter category was null or undefined when calling apiFindArticleListCategoryGet.");
      }
      const localVarPath = "/api/find/article/list/category"
        .replace(`{${"category"}}`, encodeURIComponent(String(category)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} createDate A created date of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCreateDateGet(createDate: string, options: any = {}): RequestArgs {
      // verify required parameter 'createDate' is not null or undefined
      if (createDate === null || createDate === undefined) {
        throw new RequiredError("createDate","Required parameter createDate was null or undefined when calling apiFindArticleListCreateDateGet.");
      }
      const localVarPath = "/api/find/article/list/create-date"
        .replace(`{${"create_date"}}`, encodeURIComponent(String(createDate)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListGet(options: any = {}): RequestArgs {
      const localVarPath = "/api/find/article/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {number} title A title of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListTitleGet(title: number, options: any = {}): RequestArgs {
      // verify required parameter 'title' is not null or undefined
      if (title === null || title === undefined) {
        throw new RequiredError("title","Required parameter title was null or undefined when calling apiFindArticleListTitleGet.");
      }
      const localVarPath = "/api/find/article/list/title"
        .replace(`{${"title"}}`, encodeURIComponent(String(title)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindCategoryListGet(options: any = {}): RequestArgs {
      const localVarPath = "/api/find/category/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindDraftListGet(options: any = {}): RequestArgs {
      const localVarPath = "/api/find/draft/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiRegisterArticlePost(inlineObject: InlineObject, options: any = {}): RequestArgs {
      // verify required parameter 'inlineObject' is not null or undefined
      if (inlineObject === null || inlineObject === undefined) {
        throw new RequiredError("inlineObject","Required parameter inlineObject was null or undefined when calling apiRegisterArticlePost.");
      }
      const localVarPath = "/api/register/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Update article.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiUpdateArticlePut(inlineObject1: InlineObject1, options: any = {}): RequestArgs {
      // verify required parameter 'inlineObject1' is not null or undefined
      if (inlineObject1 === null || inlineObject1 === undefined) {
        throw new RequiredError("inlineObject1","Required parameter inlineObject1 was null or undefined when calling apiUpdateArticlePut.");
      }
      const localVarPath = "/api/update/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
         * 
         * @summary Draft article.
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiDraftArticlePost(inlineObject2?: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiDraftArticlePost(inlineObject2, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {Array<string>} category A category name which an articles has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCategoryGet(category: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListCategoryGet(category, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} createDate A created date of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCreateDateGet(createDate: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListCreateDateGet(createDate, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {number} title A title of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListTitleGet(title: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindArticleListTitleGet(title, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindCategoryListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindCategoryListGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindDraftListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiFindDraftListGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiRegisterArticlePost(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiRegisterArticlePost(inlineObject, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Update article.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiUpdateArticlePut(inlineObject1: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiUpdateArticlePut(inlineObject1, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         * 
         * @summary Draft article.
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiDraftArticlePost(inlineObject2?: InlineObject2, options?: any) {
      return DefaultApiFp(configuration).apiDraftArticlePost(inlineObject2, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {Array<string>} category A category name which an articles has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCategoryGet(category: string[], options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListCategoryGet(category, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {string} createDate A created date of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListCreateDateGet(createDate: string, options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListCreateDateGet(createDate, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListGet(options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles by title.
         * @param {number} title A title of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindArticleListTitleGet(title: number, options?: any) {
      return DefaultApiFp(configuration).apiFindArticleListTitleGet(title, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindCategoryListGet(options?: any) {
      return DefaultApiFp(configuration).apiFindCategoryListGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of drafts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiFindDraftListGet(options?: any) {
      return DefaultApiFp(configuration).apiFindDraftListGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiRegisterArticlePost(inlineObject: InlineObject, options?: any) {
      return DefaultApiFp(configuration).apiRegisterArticlePost(inlineObject, options)(axios, basePath);
    },
    /**
         * 
         * @summary Update article.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    apiUpdateArticlePut(inlineObject1: InlineObject1, options?: any) {
      return DefaultApiFp(configuration).apiUpdateArticlePut(inlineObject1, options)(axios, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
     * 
     * @summary Draft article.
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiDraftArticlePost(inlineObject2?: InlineObject2, options?: any) {
    return DefaultApiFp(this.configuration).apiDraftArticlePost(inlineObject2, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles by title.
     * @param {Array<string>} category A category name which an articles has.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListCategoryGet(category: string[], options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListCategoryGet(category, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles by title.
     * @param {string} createDate A created date of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListCreateDateGet(createDate: string, options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListCreateDateGet(createDate, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListGet(options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles by title.
     * @param {number} title A title of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindArticleListTitleGet(title: number, options?: any) {
    return DefaultApiFp(this.configuration).apiFindArticleListTitleGet(title, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindCategoryListGet(options?: any) {
    return DefaultApiFp(this.configuration).apiFindCategoryListGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of drafts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiFindDraftListGet(options?: any) {
    return DefaultApiFp(this.configuration).apiFindDraftListGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Register new article.
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiRegisterArticlePost(inlineObject: InlineObject, options?: any) {
    return DefaultApiFp(this.configuration).apiRegisterArticlePost(inlineObject, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Update article.
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public apiUpdateArticlePut(inlineObject1: InlineObject1, options?: any) {
    return DefaultApiFp(this.configuration).apiUpdateArticlePut(inlineObject1, options)(this.axios, this.basePath);
  }

}


