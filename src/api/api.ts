// tslint:disable
/**
 * argus
 * My blog
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 * 
 * @export
 * @interface Article
 */
export interface Article {
    /**
     * 
     * @type {number}
     * @memberof Article
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    title?: string;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Article
     */
    categories?: Category[];
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    createDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    updateDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    contentUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Article
     */
    imageUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Article
     */
    _private?: boolean;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    articleNum?: number;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {Article}
     * @memberof InlineObject
     */
    articles?: Article;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {Article}
     * @memberof InlineObject1
     */
    articles?: Article;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Article>}
     * @memberof InlineResponse200
     */
    articles?: Article[];
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Category>}
     * @memberof InlineResponse2001
     */
    categories?: Category[];
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         * 
         * @summary Return a list of article by title.
         * @param {string} category A category name which an article has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListCategoryGet(category: string, options: any = {}): RequestArgs {
      // verify required parameter 'category' is not null or undefined
      if (category === null || category === undefined) {
        throw new RequiredError("category","Required parameter category was null or undefined when calling findArticleListCategoryGet.");
      }
      const localVarPath = "/find/article/list/category"
        .replace(`{${"category"}}`, encodeURIComponent(String(category)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of article by title.
         * @param {string} createDate A created date of article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListCreateDateGet(createDate: string, options: any = {}): RequestArgs {
      // verify required parameter 'createDate' is not null or undefined
      if (createDate === null || createDate === undefined) {
        throw new RequiredError("createDate","Required parameter createDate was null or undefined when calling findArticleListCreateDateGet.");
      }
      const localVarPath = "/find/article/list/create-date"
        .replace(`{${"create_date"}}`, encodeURIComponent(String(createDate)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListGet(options: any = {}): RequestArgs {
      const localVarPath = "/find/article/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of article by title.
         * @param {number} title A title of article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListTitleGet(title: number, options: any = {}): RequestArgs {
      // verify required parameter 'title' is not null or undefined
      if (title === null || title === undefined) {
        throw new RequiredError("title","Required parameter title was null or undefined when calling findArticleListTitleGet.");
      }
      const localVarPath = "/find/article/list/title"
        .replace(`{${"title"}}`, encodeURIComponent(String(title)));
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findCategoryListGet(options: any = {}): RequestArgs {
      const localVarPath = "/find/category/list";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    registerArticlePost(inlineObject: InlineObject, options: any = {}): RequestArgs {
      // verify required parameter 'inlineObject' is not null or undefined
      if (inlineObject === null || inlineObject === undefined) {
        throw new RequiredError("inlineObject","Required parameter inlineObject was null or undefined when calling registerArticlePost.");
      }
      const localVarPath = "/register/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateArticlePut(inlineObject1: InlineObject1, options: any = {}): RequestArgs {
      // verify required parameter 'inlineObject1' is not null or undefined
      if (inlineObject1 === null || inlineObject1 === undefined) {
        throw new RequiredError("inlineObject1","Required parameter inlineObject1 was null or undefined when calling updateArticlePut.");
      }
      const localVarPath = "/update/article";
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


    
      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
      const needsSerialization = (typeof inlineObject1 !== "string") || localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {}) : (inlineObject1 || "");

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
  return {
    /**
         * 
         * @summary Return a list of article by title.
         * @param {string} category A category name which an article has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListCategoryGet(category: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findArticleListCategoryGet(category, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of article by title.
         * @param {string} createDate A created date of article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListCreateDateGet(createDate: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findArticleListCreateDateGet(createDate, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findArticleListGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of article by title.
         * @param {number} title A title of article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListTitleGet(title: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findArticleListTitleGet(title, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findCategoryListGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findCategoryListGet(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    registerArticlePost(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).registerArticlePost(inlineObject, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateArticlePut(inlineObject1: InlineObject1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateArticlePut(inlineObject1, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         * 
         * @summary Return a list of article by title.
         * @param {string} category A category name which an article has.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListCategoryGet(category: string, options?: any) {
      return DefaultApiFp(configuration).findArticleListCategoryGet(category, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of article by title.
         * @param {string} createDate A created date of article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListCreateDateGet(createDate: string, options?: any) {
      return DefaultApiFp(configuration).findArticleListCreateDateGet(createDate, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of articles.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListGet(options?: any) {
      return DefaultApiFp(configuration).findArticleListGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of article by title.
         * @param {number} title A title of article.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findArticleListTitleGet(title: number, options?: any) {
      return DefaultApiFp(configuration).findArticleListTitleGet(title, options)(axios, basePath);
    },
    /**
         * 
         * @summary Return a list of categories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findCategoryListGet(options?: any) {
      return DefaultApiFp(configuration).findCategoryListGet(options)(axios, basePath);
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    registerArticlePost(inlineObject: InlineObject, options?: any) {
      return DefaultApiFp(configuration).registerArticlePost(inlineObject, options)(axios, basePath);
    },
    /**
         * 
         * @summary Register new article.
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateArticlePut(inlineObject1: InlineObject1, options?: any) {
      return DefaultApiFp(configuration).updateArticlePut(inlineObject1, options)(axios, basePath);
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
     * 
     * @summary Return a list of article by title.
     * @param {string} category A category name which an article has.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public findArticleListCategoryGet(category: string, options?: any) {
    return DefaultApiFp(this.configuration).findArticleListCategoryGet(category, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of article by title.
     * @param {string} createDate A created date of article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public findArticleListCreateDateGet(createDate: string, options?: any) {
    return DefaultApiFp(this.configuration).findArticleListCreateDateGet(createDate, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of articles.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public findArticleListGet(options?: any) {
    return DefaultApiFp(this.configuration).findArticleListGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of article by title.
     * @param {number} title A title of article.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public findArticleListTitleGet(title: number, options?: any) {
    return DefaultApiFp(this.configuration).findArticleListTitleGet(title, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Return a list of categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public findCategoryListGet(options?: any) {
    return DefaultApiFp(this.configuration).findCategoryListGet(options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Register new article.
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public registerArticlePost(inlineObject: InlineObject, options?: any) {
    return DefaultApiFp(this.configuration).registerArticlePost(inlineObject, options)(this.axios, this.basePath);
  }

  /**
     * 
     * @summary Register new article.
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public updateArticlePut(inlineObject1: InlineObject1, options?: any) {
    return DefaultApiFp(this.configuration).updateArticlePut(inlineObject1, options)(this.axios, this.basePath);
  }

}


export const api = new DefaultApi();